{"version":3,"file":"static/js/865.8d585131.chunk.js","mappings":"4NAYaA,EAAc,SAAC,GAAwB,EAAtBC,SAAuB,IACnD,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAASC,EAAAA,EAAAA,MAATD,KACR,GAAwBE,EAAAA,EAAAA,MAAjBC,GAAP,eAkBMC,EAAe,SAACC,GAEJ,SADHA,EAAEC,OACRV,KACHC,EAAQQ,EAAEE,cAAcC,OACxBT,EAASM,EAAEE,cAAcC,QAG/B,OACE,0BACE,gBAAKC,UAAU,kBAAf,UACE,kBAAMf,SArBS,SAACW,GAGpB,OAFAA,EAAEK,iBAGI,OAAJV,QAAI,IAAJA,GAAAA,EAAMW,MAAK,SAACC,GAAD,OAAaA,EAAQhB,KAAKiB,gBAAkBjB,EAAKiB,iBACxDC,EAAAA,GAAAA,MAAA,WAAgBlB,EAAhB,6BACAO,EAAc,CAAEP,KAAAA,EAAME,MAAAA,IAV5BD,EAAQ,SACRE,EAAS,KAwBL,WACE,SAAC,KAAD,CACEgB,KAAK,OACLN,UAAU,oBACVb,KAAK,OACLoB,SAAUZ,EACVI,MAAOZ,EACPqB,YAAY,aACZC,QAAQ,yHACRC,MAAM,qcAER,SAAC,KAAD,CACEJ,KAAK,MACLnB,KAAK,SACLa,UAAU,4BACVO,SAAUZ,EACVI,MAAOV,EACPmB,YAAY,cACZC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,KAGV,mBAAQL,KAAK,SAASN,UAAU,kBAAhC,iC,kBCjDGY,EAAc,SAAC,GAAsB,EAApBC,OAAqB,IAC7CC,EACIvB,GAASC,EAAAA,EAAAA,MAATD,KACR,GAAwBwB,EAAAA,EAAAA,MAAjBC,GAAP,eAEMC,GAAcC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAsBA,KAEtD,GAAI5B,EAAM,CACR,IAAM6B,EAAmBH,EAAYI,cAAcC,KAAI,SAACC,GAAD,OACrDA,EAAGpC,KAAKiB,iBAEJoB,EAAIJ,EAAiBA,EAAiBK,OAAS,GAErDX,EAAUvB,EAAKmC,QAAO,SAACH,GAAD,OAAQA,EAAGpC,KAAKiB,cAAcuB,SAASH,MAG/D,OACE,8BACGV,IACC,eAAId,UAAU,aAAd,SACGc,EAAQQ,KAAI,SAACnB,GAAD,OACX,gBACEH,UAAU,oEADZ,WAIE,SAAC,MAAD,KACA,4BAAOG,EAAQhB,KAAf,SACA,0BAAOgB,EAAQd,SACf,SAAC,KAAD,CACEW,UAAU,OACV4B,MAAM,SACNC,KAAK,KACLC,QAAS,kBAAMd,EAAcb,EAAQoB,KAJvC,UAME,SAAC,MAAD,QAXGpB,EAAQoB,Y,SCpCdQ,EAAS,WACpB,OAA4B7C,EAAAA,EAAAA,UAAS,IAArC,eAAOwC,EAAP,KAAeM,EAAf,KAIA,OAHiBC,EAAAA,EAAAA,KACjBC,EAASC,EAAAA,EAAAA,GAAWT,KAGlB,+BACE,iBAAK1B,UAAU,+BAAf,oCAEE,kBACEM,KAAK,OACLN,UAAU,gBACVb,KAAK,SACLiD,aAAa,MACb7B,SAAU,SAACX,GAAD,OAAOoC,EAAUpC,EAAEC,OAAOE,QACpCA,MAAO2B,EACPlB,YAAY,uBCAtB,EAfqB,WACnB,OACE,iBAAKR,UAAU,YAAf,WACE,SAAC,KAAD,KACA,iBAAKA,UAAU,MAAf,WACE,SAAChB,EAAD,KACA,gBAAKgB,UAAU,kCACf,SAAC+B,EAAD,KACA,SAACnB,EAAD,CAAaC,OAAQ,MACrB,gBAAKb,UAAU","sources":["Componets/ContactForm/ContactForm.tsx","Componets/ContactList/ContactList.tsx","Componets/Filter/Filter.tsx","Views/ContactsView/ContactsView.tsx"],"sourcesContent":["import { toast } from \"react-hot-toast\";\r\nimport React, { useState } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\nimport {\r\n  useFetchContactsQuery,\r\n  useCreateContactMutation,\r\n} from \"../../redux/contactApi\";\r\n\r\ninterface Props {\r\n  onSubmit?: (contact: { name: string; phone: string }) => void;\r\n}\r\n\r\nexport const ContactForm = ({ onSubmit }: Props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const { data } = useFetchContactsQuery();\r\n  const [createContact] = useCreateContactMutation();\r\n\r\n  const handleFormReset = () => {\r\n    setName(\"\");\r\n    setPhone(\"\");\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    return (\r\n      data?.find((contact) => contact.name.toLowerCase() === name.toLowerCase())\r\n        ? toast.error(` ${name} is already in contacts.`)\r\n        : createContact({ name, phone }),\r\n      handleFormReset()\r\n    );\r\n  };\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    let target = e.target as HTMLInputElement;\r\n    target.name === \"name\"\r\n      ? setName(e.currentTarget.value)\r\n      : setPhone(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\" input-group-lg\">\r\n        <form onSubmit={handleSubmit}>\r\n          <Input\r\n            type=\"text\"\r\n            className=\"form-control w-50\"\r\n            name=\"name\"\r\n            onChange={handleChange}\r\n            value={name}\r\n            placeholder=\"Input Name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          />\r\n          <Input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            className=\"form-control w-50 my-sm-3\"\r\n            onChange={handleChange}\r\n            value={phone}\r\n            placeholder=\"Input Phone\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { Button } from \"reactstrap\";\r\nimport { BsFillPersonFill, BsFillTrashFill } from \"react-icons/bs\";\r\nimport {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n} from \"../../redux/contactApi\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\ntype Contacts = {\r\n  name: string;\r\n  phone: string;\r\n};\r\n\r\ninterface Props {\r\n  result: Contacts[];\r\n}\r\n\r\nexport const ContactList = ({ result }: Props) => {\r\n  let newData;\r\n  const { data } = useFetchContactsQuery();\r\n  const [deleteContact] = useDeleteContactMutation();\r\n\r\n  const searchValue = useSelector((state: RootState) => state);\r\n\r\n  if (data) {\r\n    const normalizedFilter = searchValue.reducerFilter.map((id) =>\r\n      id.name.toLowerCase()\r\n    );\r\n    const b = normalizedFilter[normalizedFilter.length - 1];\r\n\r\n    newData = data.filter((id) => id.name.toLowerCase().includes(b));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {newData && (\r\n        <ul className=\"list-group\">\r\n          {newData.map((contact: any) => (\r\n            <li\r\n              className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              key={contact.id}\r\n            >\r\n              <BsFillPersonFill />\r\n              <span>{contact.name}: </span>\r\n              <span>{contact.phone}</span>\r\n              <Button\r\n                className=\"my-3\"\r\n                color=\"danger\"\r\n                size=\"sm\"\r\n                onClick={() => deleteContact(contact.id)}\r\n              >\r\n                <BsFillTrashFill />\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\nimport { filterItem } from \"../../redux/contacts-reducer\";\r\nimport { AppDispatch } from \"../../redux/store\";\r\n\r\nexport const Filter = () => {\r\n  const [filter, setFilter] = useState(\"\");\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  dispatch(filterItem(filter));\r\n\r\n  return (\r\n    <>\r\n      <div className=\" input-group-lg w-50 my-sm-3\">\r\n        Find contacts by name:\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control \"\r\n          name=\"filter\"\r\n          autoComplete=\"off\"\r\n          onChange={(e) => setFilter(e.target.value)}\r\n          value={filter}\r\n          placeholder=\"Search Value\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Toaster } from \"react-hot-toast\";\nimport * as React from \"react\";\nimport { ContactForm } from \"Componets/ContactForm/ContactForm\";\nimport { ContactList } from \"Componets/ContactList/ContactList\";\nimport { Filter } from \"Componets/Filter/Filter\";\n\nconst ContactsView = () => {\n  return (\n    <div className=\"container\">\n      <Toaster />\n      <div className=\"row\">\n        <ContactForm />\n        <div className=\" p-0 pl-sm-3 pl-md-0 pr-sm-4\"></div>\n        <Filter />\n        <ContactList result={[]} />\n        <div className=\"p-0 pl-sm-3 pl-md-0 pr-sm-4\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactsView;\n"],"names":["ContactForm","onSubmit","useState","name","setName","phone","setPhone","data","useFetchContactsQuery","useCreateContactMutation","createContact","handleChange","e","target","currentTarget","value","className","preventDefault","find","contact","toLowerCase","toast","type","onChange","placeholder","pattern","title","required","ContactList","result","newData","useDeleteContactMutation","deleteContact","searchValue","useSelector","state","normalizedFilter","reducerFilter","map","id","b","length","filter","includes","color","size","onClick","Filter","setFilter","useDispatch","dispatch","filterItem","autoComplete"],"sourceRoot":""}